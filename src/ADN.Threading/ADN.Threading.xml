<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADN.Threading</name>
    </assembly>
    <members>
        <member name="T:ADN.Threading.Lock">
            <summary>
            A static class that provides a mechanism that synchronizes access to objects.
            </summary>
        </member>
        <member name="M:ADN.Threading.Lock.CompletesIn(System.Object,System.Int32,System.Action)">
            <summary>
            Attempts, for the specified number of milliseconds, to acquire an exclusive lock
            on the specified object, and execute the action.
            </summary>
            <param name="obj">The object on which to acquire the lock.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the lock.</param>
            <param name="action">Action to execute.</param>
            <exception cref="T:System.TimeoutException">Timeout exceeded, unable to lock.</exception>
            <exception cref="T:System.Exception">An exception occured during the lock proces.</exception>
            <example>
            <code lang="csharp">
            var lockObj = new object();
            var timeout = 1000;
            Lock.CompletesIn(lockObj, timeout, () =>
            { 
                // your function
            });
            </code>
            </example>
        </member>
        <member name="T:ADN.Threading.TaskTimeout">
            <summary>
            A static class to execute asynchronous operations.
            </summary>
        </member>
        <member name="M:ADN.Threading.TaskTimeout.CompletesIn(System.Int32,System.Action)">
            <summary>
            Waits for the provided operation to complete execution within a specified time interval.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait.</param>
            <param name="action">Operation on which to wait.</param>
            <exception cref="T:System.TimeoutException">Task not completed within the specified time interval.</exception>
            <example>
            <code lang="csharp">
            var timeout = 1000;
            TaskTimeout.CompletesIn(timeout, () =>
            {
                // your function
            });
            </code>
            </example>
        </member>
        <member name="T:ADN.Threading.TimerWithLock">
            <summary>
            Safe overlap timer with lock.
            </summary>
        </member>
        <member name="M:ADN.Threading.TimerWithLock.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TimerWithLock class.
            </summary>
            <param name="callback">A System.Threading.TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds.
            Specify System.Threading.Timeout.Infinite to prevent the timer from starting.
            Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds.
            Specify System.Threading.Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:ADN.Threading.TimerWithLock.Dispose">
            <summary>
            Releases all resources used by the current instance of ADN.Threading.TimerWithLock.
            </summary>
        </member>
        <member name="T:ADN.Threading.TimerWithRestart">
            <summary>
            Safe overlap timer with stop and restart.
            </summary>
        </member>
        <member name="M:ADN.Threading.TimerWithRestart.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TimerWithRestart class.
            </summary>
            <param name="callback">A System.Threading.TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds.
            Specify System.Threading.Timeout.Infinite to prevent the timer from starting.
            Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds.
            Specify System.Threading.Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:ADN.Threading.TimerWithRestart.Dispose">
            <summary>
            Releases all resources used by the current instance of ADN.Threading.TimerWithRestart.
            </summary>
        </member>
        <member name="T:ADN.Threading.TimerWithTryEnter">
            <summary>
            Safe overlap timer with try enter.
            </summary>
        </member>
        <member name="M:ADN.Threading.TimerWithTryEnter.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TimerWithTryEnter class.
            </summary>
            <param name="callback">A System.Threading.TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds.
            Specify System.Threading.Timeout.Infinite to prevent the timer from starting.
            Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds.
            Specify System.Threading.Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:ADN.Threading.TimerWithTryEnter.Dispose">
            <summary>
            Releases all resources used by the current instance of ADN.Threading.TimerWithTryEnter.
            </summary>
        </member>
    </members>
</doc>
